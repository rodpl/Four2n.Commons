<Configuration>
  <CodeStyleSettings>
    <ExternalPath IsNull="False">
    </ExternalPath>
    <Sharing>SOLUTION</Sharing>
    <AgentSmithCSharpStyleSettings version="1">
      <CodeStyleSettings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
        <CustomDictionaries>
          <Dictionaries>
            <CustomDictionary>
              <Name>en-US</Name>
              <CaseSensitive>false</CaseSensitive>
              <UserWords />
            </CustomDictionary>
          </Dictionaries>
        </CustomDictionaries>
        <StringsDictionary>en-US</StringsDictionary>
        <IdentifierDictionary>en-US</IdentifierDictionary>
        <LastSelectedCustomDictionary>en-US</LastSelectedCustomDictionary>
        <CommentsSettings>
          <DictionaryName>en-US</DictionaryName>
          <CommentMatch>
            <Match>
              <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
              <Declaration>Any</Declaration>
              <IsReadOnly>Maybe</IsReadOnly>
              <IsStatic>Maybe</IsStatic>
              <ParamDirection>Any</ParamDirection>
            </Match>
          </CommentMatch>
          <SuppressIfBaseHasComment>false</SuppressIfBaseHasComment>
          <MaxLineLength>80</MaxLineLength>
        </CommentsSettings>
        <NamingConventionSettings>
          <Rules>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Classes, Enumerations, Enumeration values should be named in Pascal</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Non private properties, methods, events should be in pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Property</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Event</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Private properties, methods, events should be in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Fields should be underscore camel.</Description>
              <MustHavePrefixes>
                <string>_</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Variable</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Variable should be declared in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Parameter</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Function parameters should be in camel.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Camel</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Namespaces should be in Pascal.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>_</string>
                <string>m_</string>
              </MustNotHavePrefixes>
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Constants should be in capital.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>UpperCase</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Acronyms should not have more than 2 characters.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>MatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>^(?&gt;(XML|SQL|[A-Z]{0,2})[A-Z]?([^A-Z]|$)|[^A-Z]+)*$</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Any</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Constant</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Field</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Private</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>None</AccessLevel>
                  <Declaration>Namespace</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Names should not have underscore character</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;_)</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestFixtureAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>TestFixtures should end with Test.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Test</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Test</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Method</Declaration>
                  <MarkedWithAttribute>NUnit.Framework.TestAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Test methods should start with Test.</Description>
              <MustHavePrefixes>
                <string>Test</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Test</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Enumerations should not end with Enum.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>Enum</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>EnumerationMember</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Do not name enumerations reserved.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>NotMatchesRegex</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
              <Regex>(?&lt;remove&gt;(reserved|Reserved))</Regex>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Event</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Event should not have Before or After prefix.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes>
                <string>Before</string>
                <string>After</string>
              </MustNotHavePrefixes>
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Flags enums should have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>s</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>true</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Enum</Declaration>
                  <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Enums that are not flags should not have plural names</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes>
                <string>s</string>
              </MustNotHaveSuffixes>
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Attribute</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Attribute should end with Attribute.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Attribute</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.EventArgs</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>EventArgs should end with EventArgs.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>EventArgs</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Exception</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Exceptions should end with Exception.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Exception</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches />
              <Description>Stack should end with Collection or Stack.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Stack</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IEnumerable</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.ICollection</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <NotMatches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Stack</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                  <MarkedWithAttribute />
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </NotMatches>
              <Description>Collections should end with Collection.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Generic.IDictionary</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Dictionary should end with Dictionary.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Dictionary</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Class</Declaration>
                  <InheritedFrom>System.Collections.Queue</InheritedFrom>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Queue should end with Collection or Queue.</Description>
              <MustHavePrefixes />
              <MustNotHavePrefixes />
              <Rule>None</Rule>
              <MustHaveSuffixes>
                <string>Collection</string>
                <string>Queue</string>
              </MustHaveSuffixes>
              <MustNotHaveSuffixes />
            </NamingConventionRule>
            <NamingConventionRule>
              <IsDisabled>false</IsDisabled>
              <Matches>
                <Match>
                  <AccessLevel>Any</AccessLevel>
                  <Declaration>Interface</Declaration>
                  <IsReadOnly>Maybe</IsReadOnly>
                  <IsStatic>Maybe</IsStatic>
                  <ParamDirection>Any</ParamDirection>
                </Match>
              </Matches>
              <Description>Interfaces should be in Pascal and start with I.</Description>
              <MustHavePrefixes>
                <string>I</string>
              </MustHavePrefixes>
              <MustNotHavePrefixes />
              <Rule>Pascal</Rule>
              <MustHaveSuffixes />
              <MustNotHaveSuffixes />
            </NamingConventionRule>
          </Rules>
          <Exclusions />
        </NamingConventionSettings>
        <IdentifiersToSpellCheck>
          <Match>
            <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
            <Declaration>Any</Declaration>
            <IsReadOnly>Maybe</IsReadOnly>
            <IsStatic>Maybe</IsStatic>
            <ParamDirection>Any</ParamDirection>
          </Match>
        </IdentifiersToSpellCheck>
        <PatternsToIgnore>
          <string>(?#email)\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</string>
          <string>(?#url)http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</string>
        </PatternsToIgnore>
      </CodeStyleSettings>
    </AgentSmithCSharpStyleSettings>
    <CSharp>
      <FormatSettings>
        <ANONYMOUS_METHOD_DECLARATION_BRACES>NEXT_LINE</ANONYMOUS_METHOD_DECLARATION_BRACES>
        <BLANK_LINES_AROUND_SINGLE_LINE_FIELD>1</BLANK_LINES_AROUND_SINGLE_LINE_FIELD>
        <BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE>1</BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE>
        <BLANK_LINES_BETWEEN_USING_GROUPS>1</BLANK_LINES_BETWEEN_USING_GROUPS>
        <CASE_BLOCK_BRACES>NEXT_LINE</CASE_BLOCK_BRACES>
        <CONTINUOUS_INDENT_MULTIPLIER>2</CONTINUOUS_INDENT_MULTIPLIER>
        <FORCE_ATTRIBUTE_STYLE>SEPARATE</FORCE_ATTRIBUTE_STYLE>
        <FORCE_FIXED_BRACES_STYLE>ALWAYS_ADD</FORCE_FIXED_BRACES_STYLE>
        <FORCE_FOR_BRACES_STYLE>ALWAYS_ADD</FORCE_FOR_BRACES_STYLE>
        <FORCE_FOREACH_BRACES_STYLE>ALWAYS_ADD</FORCE_FOREACH_BRACES_STYLE>
        <FORCE_IFELSE_BRACES_STYLE>ALWAYS_ADD</FORCE_IFELSE_BRACES_STYLE>
        <FORCE_USING_BRACES_STYLE>ALWAYS_ADD</FORCE_USING_BRACES_STYLE>
        <FORCE_WHILE_BRACES_STYLE>ALWAYS_ADD</FORCE_WHILE_BRACES_STYLE>
        <INDENT_NESTED_FIXED_STMT>True</INDENT_NESTED_FIXED_STMT>
        <INDENT_NESTED_USINGS_STMT>True</INDENT_NESTED_USINGS_STMT>
        <INDENT_SIZE>4</INDENT_SIZE>
        <KEEP_BLANK_LINES_IN_CODE>1</KEEP_BLANK_LINES_IN_CODE>
        <KEEP_USER_LINEBREAKS>False</KEEP_USER_LINEBREAKS>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <PLACE_ABSTRACT_ACCESSORHOLDER_ON_SINGLE_LINE>False</PLACE_ABSTRACT_ACCESSORHOLDER_ON_SINGLE_LINE>
        <REDUNDANT_THIS_QUALIFIER_STYLE>ALWAYS_USE</REDUNDANT_THIS_QUALIFIER_STYLE>
        <SIMPLE_EMBEDDED_STATEMENT_STYLE>LINE_BREAK</SIMPLE_EMBEDDED_STATEMENT_STYLE>
        <SPACE_AFTER_TYPECAST_PARENTHESES>False</SPACE_AFTER_TYPECAST_PARENTHESES>
        <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
        <SPACE_BEFORE_TYPEOF_PARENTHESES>False</SPACE_BEFORE_TYPEOF_PARENTHESES>
        <STICK_COMMENT>False</STICK_COMMENT>
        <WRAP_AFTER_DECLARATION_LPAR>True</WRAP_AFTER_DECLARATION_LPAR>
        <WRAP_AFTER_INVOCATION_LPAR>True</WRAP_AFTER_INVOCATION_LPAR>
        <WRAP_ARGUMENTS_STYLE>CHOP_IF_LONG</WRAP_ARGUMENTS_STYLE>
        <WRAP_BEFORE_BINARY_OPSIGN>True</WRAP_BEFORE_BINARY_OPSIGN>
        <WRAP_EXTENDS_LIST_STYLE>CHOP_IF_LONG</WRAP_EXTENDS_LIST_STYLE>
        <WRAP_PARAMETERS_STYLE>CHOP_IF_LONG</WRAP_PARAMETERS_STYLE>
      </FormatSettings>
      <UsingsSettings>
        <AddImportsToDeepestScope>True</AddImportsToDeepestScope>
        <AllowAlias>False</AllowAlias>
      </UsingsSettings>
      <Naming2 />
      <CustomMemberReorderingPatterns><![CDATA[<?xml version="1.0" encoding="utf-8" ?>

<!--
I. Overall

I.1 Each pattern can have <Match>....</Match> element. For the given type declaration, the pattern with the match, evaluated to 'true' with the largest weight, will be used 
I.2 Each pattern consists of the sequence of <Entry>...</Entry> elements. Type member declarations are distributed between entries
I.3 If pattern has RemoveAllRegions="true" attribute, then all regions will be cleared prior to reordering. Otherwise, only auto-generated regions will be cleared
I.4 The contents of each entry is sorted by given keys (First key is primary,  next key is secondary, etc). Then the declarations are grouped and en-regioned by given property

II. Available match operands

Each operand may have Weight="..." attribute. This weight will be added to the match weight if the operand is evaluated to 'true'.
The default weight is 1

II.1 Boolean functions:
II.1.1 <And>....</And>
II.1.2 <Or>....</Or>
II.1.3 <Not>....</Not>

II.2 Operands
II.2.1 <Kind Is="..."/>. Kinds are: class, struct, interface, enum, delegate, type, constructor, destructor, property, indexer, method, operator, field, constant, event, member
II.2.2 <Name Is="..." [IgnoreCase="true/false"] />. The 'Is' attribute contains regular expression
II.2.3 <HasAttribute CLRName="..." [Inherit="true/false"] />. The 'CLRName' attribute contains regular expression
II.2.4 <Access Is="..."/>. The 'Is' values are: public, protected, internal, protected internal, private
II.2.5 <Static/>
II.2.6 <Abstract/>
II.2.7 <Virtual/>
II.2.8 <Override/>
II.2.9 <Sealed/>
II.2.10 <Readonly/>
II.2.11 <ImplementsInterface CLRName="..."/>. The 'CLRName' attribute contains regular expression
II.2.12 <HandlesEvent />
-->

<Patterns xmlns="urn:shemas-jetbrains-com:member-reordering-patterns">

  <!-- Do not reorder COM interfaces -->
  <Pattern>
    <Match>
      <And Weight="1000">
        <Kind Is="interface"/>
        <HasAttribute CLRName="System.Runtime.InteropServices.InterfaceTypeAttribute" Inherit="true"/>
      </And>
    </Match>
  </Pattern>

  <!-- Do not reorder P/Invoke structs -->
  <Pattern>
    <Match>
      <And Weight="1000">
        <Or>
          <Kind Is="struct"/>
          <Kind Is="class"/>
        </Or>
        <HasAttribute CLRName="System.Runtime.InteropServices.StructLayoutAttribute" Inherit="true"/>
      </And>
    </Match>
  </Pattern>

  <!-- Do not reorder P/Invoke classes (called xxxNativeMethods) -->
  <Pattern>
    <Match>
      <And Weight="1000">
        <Kind Is="class"/>
        <Name Is=".*NativeMethods" />
      </And>
    </Match>
  </Pattern>

  <!-- Special formatting of NUnit test fixture -->
  <Pattern RemoveAllRegions="true">
    <Match>
      <And Weight="1000">
        <Kind Is="class"/>
        <HasAttribute CLRName="NUnit.Framework.TestFixtureAttribute" Inherit="true"/>
      </And>
    </Match>


    <!-- constants -->
    <Entry>
      <Match>
        <Kind Is="constant"/>
      </Match>
      <Sort>
        <Access Order="public protected internal private"/>
        <Name/>
      </Sort>
      <Group Region="Constants">
      </Group>
    </Entry>

    <!-- fields -->
    <Entry>
      <Match>
        <Kind Is="field" Weight="100" />
      </Match>
      <Sort>
        <Static/>
        <Readonly/>
        <Name/>
      </Sort>
    </Entry>

    <!-- Constructors/Finalizers. Place static one first -->
    <Entry>
      <Match>
        <Or Weight="100" >
          <Kind Is="constructor"/>
          <Kind Is="destructor"/>
        </Or>
      </Match>
      <Sort>
        <Static/>
        <Kind Order="constructor destructor" />
      </Sort>
    </Entry>
    

    <!-- Setup/Teardown -->
    <Entry>
      <Match>
        <And>
          <Kind Is="method"/>
          <Or>
            <HasAttribute CLRName="NUnit.Framework.SetUpAttribute" Inherit="true"/>
            <HasAttribute CLRName="NUnit.Framework.TearDownAttribute" Inherit="true"/>
            <HasAttribute CLRName="NUnit.Framework.TestFixtureSetUpAttribute" Inherit="true"/>
            <HasAttribute CLRName="NUnit.Framework.TestFixtureTearDownAttribute" Inherit="true"/>
          </Or>
        </And>
      </Match>
    </Entry>
    
    
    <!--Test methods-->
    <Entry>
      <Match>
        <And Weight="100">
          <Kind Is="method"/>
          <HasAttribute CLRName="NUnit.Framework.TestAttribute" Inherit="false"/>
        </And>
      </Match>
      <Sort>
        <Name/>
      </Sort>
    </Entry>

    <!--All other members-->
    <Entry>
    </Entry>
    
  </Pattern>

  <!-- Default file-level pattern -->
  <Pattern>

    <!-- delegates -->
    <Entry>
      <Match>
        <Kind Is="delegate"/>
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Delegates" />
    </Entry>
    
    <!-- enums -->
    <Entry>
      <Match>
        <Kind Is="enum"/>
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Enumerations" />
    </Entry>

    <!-- interfaces -->
    <Entry>
      <Match>
        <Kind Is="interface" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Interfaces" />
    </Entry>
    
    <!-- structs -->
    <Entry>
      <Match>
        <Kind Is="struct" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Structs" />
    </Entry>

    <!-- classes -->
    <Entry>
      <Match>
        <Kind Is="class" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>

    <!--all other members-->
    <Entry/>
    
  </Pattern>
  
  <!-- Class-level pattern -->
  <Pattern RemoveAllRegions="true">
    <Match>
      <Or Weight="500" >
        <Kind Is="class" />
        <Kind Is="struct" />
      </Or>
    </Match>
    
    <!-- constants -->
    <Entry>
      <Match>
        <Kind Is="constant" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private"/>
        <Name/>
      </Sort>
    </Entry>

    <!-- fields -->
    <Entry>
      <Match>
        <Kind Is="field" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private"/>
        <Static />
        <Readonly/>
        <Name/>
      </Sort>
    </Entry>

    <!-- Constructors -->
    <Entry>
      <Match>
        <Kind Is="constructor" />
      </Match>
      <Sort>
        <Static/>
        <Access Order="public internal protected internal protected private"/>
      </Sort>
    </Entry>
    
    <!-- Finalizers -->
    <Entry>
      <Match>
        <Kind Is="destructor" />
      </Match>
      <Sort>
        <Static/>
        <Access Order="public internal protected internal protected private"/>
      </Sort>
    </Entry>
    
    <!-- Delegates -->
    <Entry>
      <Match>
        <Kind Is="delegate" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Events -->
    <Entry>
      <Match>
        <Kind Is="event" />
      </Match>
      <Sort>
        <Static/>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>

    <!-- enums -->
    <Entry>
      <Match>
        <Kind Is="enum" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>

    <!-- interfaces -->
    <Entry>
      <Match>
        <Kind Is="interface" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Properties -->
    <Entry>
      <Match>
            <Kind Is="property" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Indexers -->
    <Entry>
      <Match>
            <Kind Is="indexer" Weight="90"  />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- ClassInitialize Methods -->
    <Entry>
      <Match>
        <And Weight="200">
          <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute" Inherit="false"/>
          <Kind Is="method" />
        </And>
      </Match>
    </Entry>
    
    <!-- TestInitialize Methods -->
    <Entry>
      <Match>
        <And Weight="200">
          <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute" Inherit="false"/>
          <Kind Is="method" />
        </And>
      </Match>
    </Entry>
    
    <!-- Other Methods -->
    <Entry>
      <Match>
        <Kind Is="method" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Static />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Event handlers -->
    <Entry>
      <Match>
        <HandlesEvent Weight="90" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Override/>
        <Name/>
      </Sort>
    </Entry>

    <!--Nested structs -->
    <Entry>
      <Match>
        <Kind Is="struct" Weight="100" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!--Nested classes -->
    <Entry>
      <Match>
        <Kind Is="class" Weight="100" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Anything else -->
    <Entry />
    
  </Pattern>

  
</Patterns>
]]></CustomMemberReorderingPatterns>
    </CSharp>
    <VB>
      <FormatSettings>
        <INDENT_SIZE>4</INDENT_SIZE>
        <INSERT_TABS>True</INSERT_TABS>
      </FormatSettings>
      <ImportsSettings />
      <Naming2 />
    </VB>
    <GenerateMemberBody />
    <Naming2>
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="False" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
    </Naming2>
  </CodeStyleSettings>
</Configuration>